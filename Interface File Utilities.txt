THE COMMODORE 64 MACRO ASSEMBLER DEVELOPMENT SYSTEMOBJECT/INTERFACE FILE UTILITIESCopyright 1982, Commodore Business MachinesProfessional Computer Division1200 Wilson DriveWest Chester, PA  19380COPYRIGHTThis software product is copyrighted and all rights reserved.  Thedistribution and sale of this product are intended for the use of theoriginal purchaser only.  Lawful users of this program are herebylicensed only to read the program, from its medium into memory of acomputer, solely for the purpose of executing the program.  Duplicating,copying, selling or otherwise distributing this product is a violationof the law.This manual is copyright and all rights are reserved.  This documentmay not, in whole or part, be copied, photocopied, reproduced,translated or reduced to any electronic medium or machine readable formwithout prior consent, in writing, from Commodore Business Machines(CBM).TABLE OF CONTENTS [page numbers omitted - wf]8.0  LOADING AN OBJECT FILE     8.1  Loading the Loader Programs     8.2  Using the Loader ProgramsAPPENDICESAPPENDIX IX    Assembler/Loader Interface FileAPPENDIX X     RELEASE DISK8.0  LOADING AN OBJECT FILE     8.1  Loading the Loader Programs     8.2  Using the Loader Programs     8.3  Loader Program Tools8.0  LOADING AN OBJECT FILEThe Commodore 64 Assembler produces protable output in an ASCII formatthat can not be directly executed.  This output must be LOADED so theprogram can be executed.  This is the function of a Loader.8.1  Loading the Loader ProgramThere are two versions of the loader included on the development disk.Each version is positioned in a different area of RAM memory.  Thisallows the user to load anywhere in RAM by using the correct loader.  Toload one of the Loader programs, type:  LOAD "filename",8,1where filename is the program to be loaded.  The following table showsthe names, load points, and run commands for each loader.The orginal THE COMMODORE 64 MACRO ASSEMBLER DEVELOPMENT SYSTEM manualreferred to the loader programs as:  Name          Load Address   Run Command  LO-LOAD.C64   $0800          RUN  HI-LOAD.C64   $C800          SYS51200When in fact they where listed in the disk directory as:  Name          Load Address   Run Command  LOLOADER64    $0801          RUN  HILOADER64    $C800          SYS51200  The programs are vitually identical with the exception of the BASICstub for LOLOADER that allows it to be ran from BASIC with theRUN command.There are enhanced versions of these programs that load the "object"code into memory. The first set of these loader programs are:  Name          Load Address   Run Command  LOLOADER      $0801          RUN  HILOADER      $C800          SYS51200The first enhancment is the removal of the prompt for an offset address.The object code is always loaded at the addresses defined in the interfacefile.The second enhancment allows the loaded memory to then save it out as aprogram file. There are limitations with this added capibilty. The firstand most important is that the memory saved to disk will be from the startaddress of the first record of the file to the last address reported at theend of the load. This is only an issue if the assembler source code is notbuilt in a memory order manner (i.e. not Program Counter set to earlieraddresses for sections of code)An additional modification to the hiloader program is:  Name          Load Address   Run Command  HILOADERP     $C800          SYS51200This program includes the OFFSET address loading of the orginal program andaddes the ability to load object code under the BASIC ROM at $A000-$BFFF orthe KERNAL ROM at $E000-$FFFF.8.2  Using the Loader ProgramsBoth the HI-LOAD and LO-LOAD loaders are about 512 bytes long andoperate in the same manner.  When activated, the loaders print acopyright notice and prompt the user for a load offset.  The offset isused to place object code into an address range other than the one thatit was assembled into.  This allows the user to assemble for an areawhere there is no RAM and load into a RAM area.  The object can then beprogrammed into EPROM, etc.The offset is a two byte hexadecimal address that is added to theprogram addresses.  If the program address plus the offset is greaterthan $FFFF, the address wraps around through $0000.  The followingexamples show how offset works.  Program Address   Offset   Address of Object Code  $0400             $0000    $0400  $3000             $0000    $3000  $0400             $2000    $2400  $9000             $9000    $2000  $E000             $4000    $2000After the offset is entered, the loader will prompt the user for theobject filename to be loaded.  The loader will then initialize thedrive, search for the file, and start the load.  As the data is laoded,the program will print the input data to the CRT.  This is for userfeedback only.  When the load is completed, the loader prints themessage 'END OF LOAD' and returns to BASIC.There are three errors that can occur during a load (each is selfdocumenting):  BAD RECORD COUNT  NON-RAM LOAD  CHECKSUM ERRORErrors are considered fatal; the load is terminated, the object file isclosed, and control is returned to BASIC.8.3  Loader Program ToolsThere are two additioal programs included that support the interface filefunction. They are:  Name          Load Address   Run Command  OBJ2PRG       $0801          RUN  PRG2OBJ       $0801          RUN  As the names imply, they allow object code to be convertered directly toa program file and a program file to be converted into an object codeinterface file.OBJ2PRG allows an interface file to be converted into a program file withoutloading it into memory. The only limitations is the the interface filemust contain contiguous memory with no gaps. If the program finds an objectcode record out of sequence or out of bounds from what is was exspecting,OBJ2PRG will report the error and exit. The resulting PRG file will containa memory image defined up to the break.PRG2OBJ allows a PRG file to be converted to and interface file. This issometimes usefull with an interface object code format is needed suchas use with an EPROM programmer.APPENDIX IX     Assembler/Loader Interface FileInterface FileThis file does not contain true object code, but data which can beloaded and converted to machine code by the loader.  The format for thefirst and all succeeding records, except for the last record, is asfollows:  ; n1n0 a3a2a1a0 (d1d0)1 (d1d0)2 ... (d1d0)23 x3x2x1x0Where the following statements apply:1. All characters (n,a,d,x) are the ASCII characters zero through F,   each representing a hexadecimal digit.2. The semicolon is a record mark indicating the start of a record.3. n1n0      The number of bytes of data in this record (in             hexadecimal).  Each pair of hexadecimal characters (d1d0)             represents a single byte.4. a3a2a1a0  The hexadecimal starting address for the record.  The a3             represents address bits 15 through 12, etc.  The 8-bits             represented by (d1d0)1 is stored in address a3a2a1a0;             (d1d0)2 is stored in (a3a2a1a0)+1, etc.5. (d1d0)    Two hexadecimal digits representing an 8-bit byte of data.             (d1=high-order 4 binary bits and d0=low-order 4 bits).  A             maximum of 18 (hex) or 24 (decimal) bytes of data per             record is permitted.6. x3x2x1x0  Record check sum.  This is the hexadecimal sum of all             characters in the record, including the n1n0 and a3a2a1a0,             but excluding the record mark and the check sum of             characters.  To generate the check sum, each byte of data             (represented by two ASCII characters) is treated as 8             binary bits.  The binary sum of these 8-bit bytes is             truncated to 16 binary bits (4 hexadecimal digits) and is             then represented in the record as four ASCII characters             (x3x2x1x0).The format for the last record in a file is as follows:  ; 00 c3c2c1c0 x3x2x1x01. ; 00      Zero bytes of data are in this record.  The zeros identify             this as the final record in a file.2. c3c2c1c0  This represents the total number of records (in             hexadecimal) in this file, NOT including the last record.3. x3x2x1x0  Check sum for this record.APPENDIX X     RELEASE DISKLOLOADER64    See Section 8.  These two programs are used to load the  and         sequential records which are created by the assembler asHILOADER64    its output or object file.  When one of these programs is              run, it loads the object file into memory in the specified              location as true machine code which can be executed.  The              only difference between the two programs is that LOLOADER64              loads at hex $0800 and HILOADER64 loads at hex $C800.              They are both included in case one of them interferes with              the intended location for the machine code to reside.              To load the $0800 version, type LOAD"LOLOADER64",8 and              then type RUN.  To load the $C800 version, type LOAD              "HILOADER64",8,1 and then type SYS51200.LOLOADER      See Section 8.  These two programs are used to load the  and         sequential records which are created by the assembler asHILOADER      its output or object file.  When one of these programs is              run, it loads the object file into memory in the specified              location as true machine code which can be executed.  The              only difference between the two programs is that LOLOADER              loads at hex $0800 and HILOADER loads at hex $C800.              They are both included in case one of them interferes with              the intended location for the machine code to reside.              To load the $0801 version, type LOAD"LOLOADER",8 and              then type RUN.  To load the $C800 version, type LOAD              "HILOADER",8,1 and then type SYS51200.HILOADERP     See Section 8.  This program is used to load the              sequential records which are created by the assembler as              its output or object file.  When one of these programs is              run, it loads the object file into memory in the specified              location as true machine code which can be executed. The              memory loaded by include the RAM beneathe the BASIC and              KERNAL ROMS.              To RUN is version, type LOAD"HILOADERP",8,1 and then              type SYS51200.              OBJ2PRG       See Section 8.  These program is used to convert an object              code interface file directly to a loadable PRG file.              To RUN is program, type LOAD"OBJ2PRG",8 and then              type RUN.PRG2OBJ       See Section 8.  These program is used to convert a PROGRAM              (PRG) file into a object code interface file.                            To RUN is program, type LOAD"PRG2OBJ",8 and then              type RUN.